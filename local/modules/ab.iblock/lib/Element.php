<?php
/**
 * Created by PhpStorm.
 * User: dremin_s
 * Date: 26.07.2016
 * Time: 12:53
 */

namespace AB\Iblock;

use AB\Iblock\Exceptions\ArgumentException;
use Bitrix\Main\Entity;
use Bitrix\Main\Loader;
use Bitrix\Main\Localization\Loc;

Loc::loadMessages(__FILE__);
Loader::includeModule('iblock');

class Element extends Model\ElementTable
{
	/** @var  Manager */
	private static $manager;

	/** @var  Query */
	private static $propertyQuery;

	public static function getEntity($iblockId = null, $properties = [], $name = null)
	{
		$Manager = new Manager($iblockId);

		if (intval($iblockId) > 0 && count($properties) > 0){
			$entity = $Manager->compileEntity(null, $properties)->getElementEntity();
		} else {
			$entity = $Manager->createElementEntity()->getElementEntity();
		}

		self::$manager = $Manager;

		return $entity;
	}

	/**
	 * @method query
	 * @return Query
	 */
	public static function query()
	{
		$q = new Query(static::getEntity());
		$q->setManager(self::$manager);

		return $q;
	}

	/**
	 * @method getIblockByElementId
	 * @param int $id
	 *
	 * @return int
	 * @throws ArgumentException
	 */
	public static function getIblockByElementId($id)
	{
		if(intval($id) == 0)
			throw new ArgumentException('element id is null', $id);

		$arIblock = static::getRow([
			'select' => ['IBLOCK_ID'],
			'filter' => ['=ID' => $id]
		]);

		return (int)$arIblock['IBLOCK_ID'];
	}

	/**
	 * @method getProperty
	 * @param $iblockId
	 * @param $elementId
	 * @param $code
	 *
	 * @return array|false
	 * @throws ArgumentException
	 */
	public static function getProperty($iblockId, $elementId, $code)
	{
		if (intval($iblockId) == 0)
			throw new ArgumentException('Iblock id is null', ['IBLOCK_ID' => intval($iblockId)]);

		if (intval($elementId) == 0)
			throw new ArgumentException('Element id is null', ['ELEMENT_ID' => intval($elementId)]);

		if (strlen($code) == 0)
			throw new ArgumentException('Property code is empty', ['CODE' => intval($code)]);

		$Manager = new Manager($iblockId);
		$propEntity = $Manager->createPropertyEntity([$code])->getPropertyEntity();

		$arCode = explode('.', $code);

		$propEntity->addField(new Entity\ReferenceField(
			'PROP',
			\Bitrix\Iblock\PropertyTable::getEntity(),
			['=ref.CODE' => array('?s', $arCode[0])]
		));
		$q = new Entity\Query($propEntity);

		$q->setFilter(['IBLOCK_ELEMENT_ID' => $elementId])
			->setSelect(['' => 'PROP', 'VALUE' => $code,])
			->setLimit(1);

		$res = $q->exec();

		return $res->fetch();
	}

	/**
	 * @method getAllProperties - метод экспериментальный
	 * @param $iblockId
	 * @param $elementId
	 *
	 * @return array|false|null
	 * @throws ArgumentException
	 */
	private static function getAllProperties($iblockId, $elementId)
	{
		if (intval($iblockId) == 0)
			throw new ArgumentException('Iblock id is null', ['IBLOCK_ID' => intval($iblockId)]);

		if (intval($elementId) == 0)
			throw new ArgumentException('Element id is null', ['ELEMENT_ID' => intval($elementId)]);

		$Manager = new Manager($iblockId);
		$propEntity = $Manager->createPropertyEntity(['*'])->getPropertyEntity();

		$q = new Entity\Query($propEntity);
		$q->setSelect(['*'])
			->setFilter(['IBLOCK_ELEMENT_ID' => $elementId])
			->setLimit(null);

		$res = $q->exec();
		$result = null;
		while ($prop = $res->fetch()) {
			$result = $prop;
		}

		return $result;
	}

	/**
	 * @method add
	 * @param array $data
	 *
	 * @return Entity\AddResult
	 */
	public static function add(array $data)
	{
		return parent::add($data); // TODO: Change the autogenerated stub
	}


	public static function update($primary, array $data)
	{
		static::normalizePrimary($primary, $data);
		static::validatePrimary($primary);

		$result = new Entity\UpdateResult();

		$arProperties = $data['PROPERTY_VALUES'];
		unset($data['PROPERTY_VALUES']);

		if (intval($data['IBLOCK_ID']) == 0 && count($arProperties) > 0)
			$result->addError(new Entity\EntityError('IBLOCK_ID should not be null'));
		elseif (intval($data['IBLOCK_ID']) > 0 && count($arProperties) > 0){
			$arIblock = \Bitrix\Iblock\IblockTable::getRow([
				'select' => ['ID', 'VERSION'],
				'filter' => ['=ID' => $data['IBLOCK_ID']],
			]);
			if (is_null($arIblock)){
				$result->addError(new Entity\EntityError(
					Loc::getMessage('AB_THIS_IBLOCK_ID_IS_NOT_EXIST', ['#ID#' => $data['IBLOCK_ID']])
				));
			}
		}

		if (!$result->isSuccess(true)){
			return $result;
		}

		$entity = static::getEntity($data['IBLOCK_ID'], ['*']);

		try
		{
			//event before update
			$event = new Entity\Event($entity, self::EVENT_ON_BEFORE_UPDATE, array("id" => $primary, "fields" => $data));
			$event->send();
			$event->getErrors($result);
			$data = $event->mergeFields($data);

			//event before update (modern with namespace)
			$event = new Entity\Event($entity, self::EVENT_ON_BEFORE_UPDATE, array("id" => $primary, "primary" => $primary, "fields" => $data), true);
			$event->send();
			$event->getErrors($result);
			$data = $event->mergeFields($data);
			$fieldsTmp = [];
			// set fields with default values
			foreach ($entity->getFields() as $field)
			{
				$fieldsTmp[] = $field->getName();
				if ($field instanceof Entity\ScalarField && !array_key_exists($field->getName(), $data))
				{
					$defaultValue = $field->getDefaultValue();

					if ($defaultValue !== null)
					{
						$data[$field->getName()] = $field->getDefaultValue();
					}
				}
			}

			$diff = array_diff(array_keys($data), $fieldsTmp);
			foreach ($diff as $df) {
				unset($data[$df]);
			}
			unset($diff);

			static::checkFields($result, $primary, $data);

			if (!$result->isSuccess(true)){
				return $result;
			}

			//event on update
			$event = new Entity\Event($entity, self::EVENT_ON_UPDATE, array("id" => $primary, "fields" => $data));
			$event->send();

			//event on update (modern with namespace)
			$event = new Entity\Event($entity, self::EVENT_ON_UPDATE, array("id" => $primary, "primary" => $primary, "fields" => $data), true);
			$event->send();

			// use save modifiers
			foreach ($data as $fieldName => $value)
			{
				$field = static::getEntity()->getField($fieldName);
				$data[$fieldName] = $field->modifyValueBeforeSave($value, $data);
			}

			// save data
			if (!empty($data))
			{
				$connection = $entity->getConnection();
				$helper = $connection->getSqlHelper();

				$tableName = $entity->getDBTableName();

				$dataReplacedColumn = static::replaceFieldName($data);
				$update = $helper->prepareUpdate($tableName, $dataReplacedColumn);

				$replacedPrimary = static::replaceFieldName($primary);
				$id = array();
				foreach ($replacedPrimary as $k => $v)
				{
					$id[] = $helper->prepareAssignment($tableName, $k, $v);
				}
				$where = implode(' AND ', $id);

				$sql = "UPDATE ".$tableName." SET ".$update[0]." WHERE ".$where;
				$connection->queryExecute($sql, $update[1]);

				$result->setAffectedRowsCount($connection);
			}

			$result->setData($data);
			$result->setPrimary($primary);

			//event after update
			$event = new Entity\Event($entity, self::EVENT_ON_AFTER_UPDATE, array("id" => $primary, "fields" => $data));
			$event->send();

			//event after update (modern with namespace)
			$event = new Entity\Event($entity, self::EVENT_ON_AFTER_UPDATE, array("id" => $primary, "primary" => $primary, "fields" => $data), true);
			$event->send();




		}catch (\Exception $e) {
			// check result to avoid warning
			$result->isSuccess();

			throw $e;
		}

		return $result;
	}

	/**
	 * @method delete
	 * @param mixed $primary
	 *
	 * @return Entity\DeleteResult
	 */
	public static function delete($primary)
	{
		return parent::delete($primary); // TODO: Change the autogenerated stub
	}

}